Repositório de onde vieram os assets do projeto:
https://github.com/ikyrie/flex-e-grid

Layout no Figma:
https://www.figma.com/file/ibWktwVpnog76rMYOdVhks/Dispondo-elementos-com-flexbox-e-grid?node-id=54%3A2358

reset.css: arquivo usado para limpar a formatação padrão dos navegadores. 

Emmet: recurso do Visual Studio para autocompletar código HTML etc.
Recursos do Visual Studio/Emmet para tags:
    Operador ponto: Insere a tag e inclui a classe nessa tag:
        tag.classe1.classe2 + Tab
        <tag class="classe1 classe2"></tag>

        .classe + Tab
        <div class="classe"></div>
    
    Operador maior: Insere a tag e dentro dela a subtag:
        tag>subtag + Tab
        <tag>
            <subtag></subtag>
        </tag>

    Operador colchetes: Insere a tag e os atributos com os valores:
        tag[atributo1=valor1 atributo2=valor2]  + Tab
        <tag atributo1="valor1" atributo2="valor2"></tag>

    Operador chaves: Insere a tag e o conteúdo dela.
        tag{Conteúdo} + Tab
        <tag>Conteúdo</tag>

    Operador mais: Insere mais de uma tag na mesma declaração:
        tag1+tag2 + Tab
        <tag1></tag1>
        <tag2></tag2>

    Operador parênteses: Agrupa tags para ordenar a hierarquia de geração do HTML:
        (.classe)+tag2 + Tab
        <div class="classe"></div>
        <tag2></tag2>

    Operador asterisco: Repete a tag n vezes:
        tag*3
        <tag></tag>
        <tag></tag>
        <tag></tag>

    Operador cifrão: Serve como variável contadora usada na impressão do HTML.
        tag{Conteúdo $}*3
        <tag>Conteúdo 1</tag>
        <tag>Conteúdo 2</tag>
        <tag>Conteúdo 3</tag>

        tag[propriedade="item-$"]*3
        <tag propriedade="item-1"></tag>
        <tag propriedade="item-2"></tag>
        <tag propriedade="item-3"></tag>

    Operador cerquilha: Inclui a propriedade ID na tag.

Cheat Sheet do Emmet: https://docs.emmet.io/cheat-sheet/
Resumo do Emmet:
    () = agrupa tags
    [] = insere propriedades
    {} = insere conteúdo na tag
    .  = insere classe
    >  = insere tag aninhada
    +  = insere tag no mesmo nível hierárquico
    *  = repete a tag N vezes.
    $  = variável contadora
    #  = fornece atributo id para a tag.

Para distribuir conteúdo, precisamos saber o que será distribuído e onde.
No exemplo, temos 3 elementos que serão distribuídos no header.

O "onde" é que vai receber a propriedade CSS display: flex. 

Definida essa propriedade, os 3 elementos-filho podem ser alinhados remanejados
com as propriedades justify-content e align-items.

Padrão BEM (Bloco, Elemento e Modificador). 
Blocos tem independência no seu nome e são pais de Elementos.
Elementos são sempre precedidos de double-underscores (__).
Modificadores são sempre precedidos de double-dashes (--) e definem o estado 
de blocos ou elementos.

Padrão de nomenclatura: bloco__elemento--modificador


Conteúdo sobre flexbox no CSS: 
https://css-tricks.com/snippets/css/a-guide-to-flexbox/


Alinhamentos horizontais dos elementos no bloco flexbox (justify-content):
    flex-start:     os elementos se alinham a partir do início do bloco.
    flex-end:       os elementos se alinham a partir do fim do bloco.
    center:         os elementos se alinham a partir do centro do bloco.
    space-around:   acrescentam-se espaços fixos nos dois lados dos elementos.
                    Elementos centrais recebem o dobro de espaçamento.
    space-evenly:   acrescentam-se espaços iguais entre os elementos e o canto.
                    Elementos centrais recebem o mesmo espaço que os laterais.
    space-between:  os elementos dos cantos ficam nos cantos, e o espaço entre
                    eles é igualado (evenly).


    Lembre-se que a propriedade justify-content só utiliza o espaço dentro do
    flexbox. Se não houver espaço no flexbox, esta propriedade não funcionará.

Alinhamentos verticais dos elementos do flexbox (align-items):
    flex-start:     os elementos se alinham a partir do topo do bloco.
    flex-end:       os elementos se alinham a partir da base do bloco.
    center:         os elementos se alinham a partir do centro do bloco.
    stretch:        os elementos se esticam em todo o flexbox. É o padrão.

Padding com dois parâmetros: 
    padding: (valores horizontais) (valores verticais);

Box-shadow com quataro parâmetros:
    box-shadow: (offset horizontal) (offset vertical) (blur) (cor)

Importando fontes:
    @font-face {
        font-family: 'nome que você quiser';
        src: url('caminho para a fonte');
    }

    body {
        ...
        font-family: 'Outras fontes', 'nome que você quiser';
        ...
    }

Para usar as fontes, é necessário usar os códigos da própria fonte.
No caso do cabeçalho, o menu de hambúrguer tem o código \e904, e o menu de 
notificações tem o código \e906.

O atributo "content" na propriedade CSS "i::before" insere um texto/conteúdo
antes da tag. Como no cabeçalho as tags i serão vazias, somente o ícone será
mostrado.

Os botões precisam de um recurso de acessibilidade para identificação. Assim,
os botões precisam da propriedade aria-label.

Podemos definir a quebra de linha dentro de um container flex, com a 
propriedade flex-wrap:
    flex-wrap: wrap;
    flex-wrap: nowrap; (Padrão)

Também podemos definir o sentido do fluxo do conteúdo de um flex container, com
a propriedade flex-direction:
    flex-direction: column; // Flui na vertical.
    flex-direction: row;  // Flui na horizontal (Padrão).

*******************************************************************************
Nota 1: justify-content e align-items inverte a função horizontal/vertical, 
a depender da flex-direction!!! O justify-content é igual a flex-direction.

Nota 2: justify-content e align-items se aplicam ao flex container; 
justify-self e align-self se aplica aos items dentro do flex container.
*******************************************************************************

Jogo para brincar com o flex containers: https://flexboxfroggy.com/
Outros jogos com CSS: https://codepip.com/games/


É possível que elementos de um flex container sejam convertidos em flex
containers também. Isso permite os alinhamentos dos filhos dos itens.

Containers flex tem a seguinte limitação: funcionam bem somente se houver 
apenas elementos na horizontal ou na vertical. Cards com elementos verticais
que contenham outros elementos na horizontal começam a poluir o código. Para 
resolver essa questão, usamos grids.

Duas limitações do flexbox:
    1)  Ao contrário dos grids, não podemos trabalhar com dois eixos ao mesmo
        tempo com flexbox;
    2)  Não é possível criar espaços precisos com o flexbox, já que ele 
        redistribui espaços restantes. Ele não estabelece dimensões-padrão
        como os grids.

A propriedade justify-items nos grids acaba funcionando como alinhamento 
horizontal dos itens (flex-start, flex-end ou center). O valor space-between
funciona como flex-start e os demais space-* como center.

Atenção à nova unidade de medida usada aqui: a fração (fr). Por exemplo:
se você quiser um grid dividido em 3 colunas iguais, use:
    grid-template-columns: 1fr 1fr 1fr;

Desta forma, o CSS não usa números imprecisos (como 33%) para as proporções.

Itens dentro do grid podem ocupar mais de uma coluna por meio da seguinte 
propriedade: 
    grid-column: span 2;

Para aumentar o espaçamento dentro do grid, use a propriedade gap. Ela só serve
para espaçamento interno (igual a space-between no justify-content do flexbox).

Há variações específicas de gap para colunas e linhas: row-gap e column-gap.

Rascunhe o layout do site no Paint, desenhando os grids e os aninhamentos, para
facilitar a divisão e a compreensão de como vai ser o grid CSS.

Use media queries para adaptar o CSS ao tamanho do dispositivo. Para cada media
query, defina o formato CSS de cada elemento (ou mesmo se ele será exibido).

Técnica de mobile first: escreva o CSS do mobile, depois escreva media queries
com classes próprias para o desktop.

Grid-areas: forma de nomear as áreas de um grid. Ele permite facilidade na
manutenção do código, pois permite o reposicionamento dos elementos do grid
apenas por meio da alteração do grid-template area.

O container precisa do estilo grid-container-areas e dos nomes das áreas que
ocuparão o espaço:
    grid-template-area: "dois-espacos dois-espacos" "esquerdo direito";
    /* Cada repetição das aspas duplas é uma nova linha de áreas no grid.*/

E para cada elemento deve conter o nome de área:
    .dois-espacos {
        grid-area: dois-espacos;
        /* Repare que, ao aplicar o nome, ele não precisa de aspas duplas. */
    }
    .esquerdo {
        grid-area: esquerdo;
    }
    .direito {
        grid-area: direito;
    }

**Parênteses: houve aplicação errada do estilo cartao--destaque no HTML. 

Cuidado ao aplicar uma propriedade grid-area: se na versão mobile não tiver o
template de areas, tudo que for nomeado na versão desktop pode ficar escondido.
